<?php
// auto-generated by sfPropelAdmin
// date: 2018/01/23 09:48:09
?>
<?php

/**
 * autoKader actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoKader
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoKaderActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('kader', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/kader/filters');

    // pager
    $this->pager = new sfPropelPager('Kader', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/kader')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/kader');
    }
  }

  public function executeCreate()
  {
    return $this->forward('kader', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('kader', 'edit');
  }

  public function executeEdit()
  {
    $this->kader = $this->getKaderOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateKaderFromRequest();

      $this->saveKader($this->kader);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('kader/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('kader/list');
      }
      else
      {
        return $this->redirect('kader/edit?id='.$this->kader->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->kader = KaderPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->kader);

    try
    {
      $this->deleteKader($this->kader);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Kader. Make sure it does not have any associated items.');
      return $this->forward('kader', 'list');
    }

    return $this->redirect('kader/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->kader = $this->getKaderOrCreate();
    $this->updateKaderFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveKader($kader)
  {
    $kader->save();

  }

  protected function deleteKader($kader)
  {
    $kader->delete();
  }

  protected function updateKaderFromRequest()
  {
    $kader = $this->getRequestParameter('kader');

    if (isset($kader['id_wilayah']))
    {
    $this->kader->setIdWilayah($kader['id_wilayah'] ? $kader['id_wilayah'] : null);
    }
    if (isset($kader['id_jenis_kader']))
    {
    $this->kader->setIdJenisKader($kader['id_jenis_kader'] ? $kader['id_jenis_kader'] : null);
    }
    if (isset($kader['nama']))
    {
      $this->kader->setNama($kader['nama']);
    }
    if (isset($kader['alamat']))
    {
      $this->kader->setAlamat($kader['alamat']);
    }
    if (isset($kader['rt']))
    {
      $this->kader->setRt($kader['rt']);
    }
    if (isset($kader['rw']))
    {
      $this->kader->setRw($kader['rw']);
    }
    if (isset($kader['no_telp']))
    {
      $this->kader->setNoTelp($kader['no_telp']);
    }
  }

  protected function getKaderOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $kader = new Kader();
    }
    else
    {
      $kader = KaderPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($kader);
    }

    return $kader;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/kader');
      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/kader/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/kader/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/kader/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/kader/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/kader/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['id_wilayah_is_empty']))
    {
      $criterion = $c->getNewCriterion(KaderPeer::ID_WILAYAH, '');
      $criterion->addOr($c->getNewCriterion(KaderPeer::ID_WILAYAH, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['id_wilayah']) && $this->filters['id_wilayah'] !== '')
    {
      $c->add(KaderPeer::ID_WILAYAH, $this->filters['id_wilayah']);
    }
    if (isset($this->filters['id_jenis_kader_is_empty']))
    {
      $criterion = $c->getNewCriterion(KaderPeer::ID_JENIS_KADER, '');
      $criterion->addOr($c->getNewCriterion(KaderPeer::ID_JENIS_KADER, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['id_jenis_kader']) && $this->filters['id_jenis_kader'] !== '')
    {
      $c->add(KaderPeer::ID_JENIS_KADER, $this->filters['id_jenis_kader']);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/kader/sort'))
    {
      $sort_column = KaderPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/kader/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'kader{id}' => 'Id:',
      'kader{id_wilayah}' => 'Wilayah:',
      'kader{id_jenis_kader}' => 'Jenis Kader:',
      'kader{nama}' => 'Nama:',
      'kader{alamat}' => 'Alamat:',
      'kader{rt}' => 'RT:',
      'kader{rw}' => 'RW:',
      'kader{no_telp}' => 'No. Telp:',
    );
  }
}
