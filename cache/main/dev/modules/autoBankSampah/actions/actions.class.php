<?php
// auto-generated by sfPropelAdmin
// date: 2018/01/22 10:26:06
?>
<?php

/**
 * autoBankSampah actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoBankSampah
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoBankSampahActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('bankSampah', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/bank_sampah/filters');

    // pager
    $this->pager = new sfPropelPager('BankSampah', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/bank_sampah')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/bank_sampah');
    }
  }

  public function executeCreate()
  {
    return $this->forward('bankSampah', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('bankSampah', 'edit');
  }

  public function executeEdit()
  {
    $this->bank_sampah = $this->getBankSampahOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateBankSampahFromRequest();

      $this->saveBankSampah($this->bank_sampah);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('bankSampah/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('bankSampah/list');
      }
      else
      {
        return $this->redirect('bankSampah/edit?id='.$this->bank_sampah->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->bank_sampah = BankSampahPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->bank_sampah);

    try
    {
      $this->deleteBankSampah($this->bank_sampah);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Bank sampah. Make sure it does not have any associated items.');
      return $this->forward('bankSampah', 'list');
    }

    return $this->redirect('bankSampah/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->bank_sampah = $this->getBankSampahOrCreate();
    $this->updateBankSampahFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveBankSampah($bank_sampah)
  {
    $bank_sampah->save();

  }

  protected function deleteBankSampah($bank_sampah)
  {
    $bank_sampah->delete();
  }

  protected function updateBankSampahFromRequest()
  {
    $bank_sampah = $this->getRequestParameter('bank_sampah');

    if (isset($bank_sampah['id_wilayah']))
    {
    $this->bank_sampah->setIdWilayah($bank_sampah['id_wilayah'] ? $bank_sampah['id_wilayah'] : null);
    }
    if (isset($bank_sampah['nama']))
    {
      $this->bank_sampah->setNama($bank_sampah['nama']);
    }
    if (isset($bank_sampah['alamat']))
    {
      $this->bank_sampah->setAlamat($bank_sampah['alamat']);
    }
    if (isset($bank_sampah['dasar_pendirian']))
    {
      $this->bank_sampah->setDasarPendirian($bank_sampah['dasar_pendirian']);
    }
    if (isset($bank_sampah['tanggal_pendirian']))
    {
      $this->bank_sampah->setTanggalPendirian($bank_sampah['tanggal_pendirian']);
    }
    if (isset($bank_sampah['bulan_pendirian']))
    {
      $this->bank_sampah->setBulanPendirian($bank_sampah['bulan_pendirian']);
    }
    if (isset($bank_sampah['tahun_pendirian']))
    {
      $this->bank_sampah->setTahunPendirian($bank_sampah['tahun_pendirian']);
    }
    if (isset($bank_sampah['sk']))
    {
      $this->bank_sampah->setSk($bank_sampah['sk']);
    }
    if (isset($bank_sampah['ketua']))
    {
      $this->bank_sampah->setKetua($bank_sampah['ketua']);
    }
    if (isset($bank_sampah['jumlah_nasabah']))
    {
      $this->bank_sampah->setJumlahNasabah($bank_sampah['jumlah_nasabah']);
    }
    if (isset($bank_sampah['omset']))
    {
      $this->bank_sampah->setOmset($bank_sampah['omset']);
    }
  }

  protected function getBankSampahOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $bank_sampah = new BankSampah();
    }
    else
    {
      $bank_sampah = BankSampahPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($bank_sampah);
    }

    return $bank_sampah;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/bank_sampah');
      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/bank_sampah/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/bank_sampah/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/bank_sampah/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/bank_sampah/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/bank_sampah/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['id_wilayah_is_empty']))
    {
      $criterion = $c->getNewCriterion(BankSampahPeer::ID_WILAYAH, '');
      $criterion->addOr($c->getNewCriterion(BankSampahPeer::ID_WILAYAH, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['id_wilayah']) && $this->filters['id_wilayah'] !== '')
    {
      $c->add(BankSampahPeer::ID_WILAYAH, $this->filters['id_wilayah']);
    }
    if (isset($this->filters['tahun_pendirian_is_empty']))
    {
      $criterion = $c->getNewCriterion(BankSampahPeer::TAHUN_PENDIRIAN, '');
      $criterion->addOr($c->getNewCriterion(BankSampahPeer::TAHUN_PENDIRIAN, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['tahun_pendirian']) && $this->filters['tahun_pendirian'] !== '')
    {
      $c->add(BankSampahPeer::TAHUN_PENDIRIAN, $this->filters['tahun_pendirian']);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/bank_sampah/sort'))
    {
      $sort_column = BankSampahPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/bank_sampah/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'bank_sampah{id_wilayah}' => 'Wilayah:',
      'bank_sampah{nama}' => 'Nama:',
      'bank_sampah{alamat}' => 'Alamat:',
      'bank_sampah{dasar_pendirian}' => 'Dasar pendirian:',
      'bank_sampah{tanggal_pendirian}' => 'Tanggal pendirian:',
      'bank_sampah{bulan_pendirian}' => 'Bulan pendirian:',
      'bank_sampah{tahun_pendirian}' => 'Tahun pendirian:',
      'bank_sampah{sk}' => 'Sk:',
      'bank_sampah{ketua}' => 'Ketua:',
      'bank_sampah{jumlah_nasabah}' => 'Jumlah nasabah:',
      'bank_sampah{omset}' => 'Omset:',
    );
  }
}
